class Solution {
public:

    int countsum(vector<int> &arr , int partition){
        int sum=1;
        long long splitsum = 0;
        for(int i=0;i<arr.size();i++){
            if(splitsum + arr[i]<= partition){
                splitsum += arr[i];
            }else{
                sum += 1;
                splitsum=arr[i];
            }
        }
        return sum;
    }

    int findsum(vector<int>&arr , int n , int m){
        if(m > n) return -1;
        int low = *max_element(arr.begin(),arr.end());
        int high = accumulate(arr.begin(),arr.end(),0);
        while(low <=high){
            int mid=(low+high)/2;
            int sum = countsum(arr , mid);
            if(sum > m){
                low=mid+1;

            }else{
                high = mid-1;
            }
        }
        return low;
    }

    int splitArray(vector<int>& nums, int k) {
        return findsum(nums , nums.size() , k);
    }
};
